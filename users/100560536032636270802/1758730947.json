[
  {
    "role": "user",
    "parts": [
      "Penting: Kamu harus selalu membalas dalam Bahasa Indonesia."
    ]
  },
  {
    "role": "model",
    "parts": [
      "Tentu, saya paham. Saya akan membalas dalam Bahasa Indonesia."
    ]
  },
  {
    "role": "user",
    "parts": [
      "Buatkan saya sebuah kode Python."
    ]
  },
  {
    "role": "model",
    "parts": [
      "Tentu! Apa yang Anda ingin lakukan dengan kode Python tersebut? Apakah Anda memerlukan contoh untuk pengolahan data, web scraping, pengembangan web, machine learning, atau yang lainnya? Berikan detail lebih lanjut agar saya bisa membantu Anda dengan tepat!"
    ]
  },
  {
    "role": "user",
    "parts": [
      "Buatkan saya aplikasi POS dengan flutter"
    ]
  },
  {
    "role": "model",
    "parts": [
      "\n> **Creating POS app**\n> User requested a Flutter-based POS app. I'll create a simple app with a product list, cart, and checkout functionality, using SQLite or Hive for storage. Since this involves code, it seems appropriate to create a single project file that includes the main.dart code along with any necessary instructions.> \n\n> **Building Flutter POS app**\n> I’ll make a simple Flutter app in one file, `main.dart`, with product list, search, cart, and checkout features. For state management, I’ll use `provider` or `ChangeNotifier`. For local storage, I might add in-memory solution or simple setup with `sqflite`. I'll provide instructions and dependencies list, but no code duplication in chat.> \n\n> **Providing app instructions**\n> I’ll create the app in the canvas and avoid repeating any code in the chat. Instead, I’ll guide the user with steps like replacing `lib/main.dart`, adding necessary dependencies to `pubspec.yaml`, and using commands like `flutter pub get` and `flutter run` to launch the app. I’ll keep instructions minimal and high-level.\n> *Thought for 10s*\n\n\n```json \n {\"name\":\"flutter_pos_main.dart\",\"type\":\"code/dart\",\"content\":\"// Simple Flutter POS (Point of Sale) single-file example\\n// Put this content into lib/main.dart of a new Flutter project.\\n// Minimal dependencies (add to pubspec.yaml under dependencies):\\n//   provider: ^6.0.5\\n//   shared_preferences: ^2.1.1\\n//   intl: ^0.18.0\\n\\nimport 'dart:convert';\\nimport 'package:flutter/material.dart';\\nimport 'package:provider/provider.dart';\\nimport 'package:shared_preferences/shared_preferences.dart';\\nimport 'package:intl/intl.dart';\\n\\nvoid main() async {\\n  WidgetsFlutterBinding.ensureInitialized();\\n  final prefs = await SharedPreferences.getInstance();\\n  runApp(MyApp(prefs: prefs));\\n}\\n\\nclass MyApp extends StatelessWidget {\\n  final SharedPreferences prefs;\\n  const MyApp({Key? key, required this.prefs}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MultiProvider(\\n      providers: [\\n        ChangeNotifierProvider(create: (_) => CartProvider(prefs)),\\n      ],\\n      child: MaterialApp(\\n        title: 'Simple POS',\\n        theme: ThemeData(primarySwatch: Colors.teal),\\n        home: HomeScreen(),\\n      ),\\n    );\\n  }\\n}\\n\\n// ----------------- Models -----------------\\nclass Product {\\n  final String id;\\n  final String name;\\n  final double price;\\n  final String? imageUrl;\\n\\n  Product({required this.id, required this.name, required this.price, this.imageUrl});\\n}\\n\\nclass CartItem {\\n  final Product product;\\n  int qty;\\n\\n  CartItem({required this.product, this.qty = 1});\\n\\n  double get total => product.price * qty;\\n\\n  Map<String, dynamic> toMap() => {\\n        'id': product.id,\\n        'name': product.name,\\n        'price': product.price,\\n        'qty': qty,\\n      };\\n}\\n\\n// ----------------- Provider -----------------\\nclass CartProvider extends ChangeNotifier {\\n  final SharedPreferences prefs;\\n  final Map<String, CartItem> _items = {};\\n\\n  CartProvider(this.prefs) {\\n    // load saved cart if any\\n    final raw = prefs.getString('cart');\\n    if (raw != null) {\\n      try {\\n        final decoded = jsonDecode(raw) as List<dynamic>;\\n        for (var e in decoded) {\\n          final map = Map<String, dynamic>.from(e);\\n          // Note: in real app you'd rehydrate products from db; here we recreate minimal product\\n          final prod = Product(\\n              id: map['id'], name: map['name'], price: (map['price'] as num).toDouble());\\n          _items[prod.id] = CartItem(product: prod, qty: map['qty'] as int);\\n        }\\n      } catch (_) {}\\n    }\\n  }\\n\\n  List<CartItem> get items => _items.values.toList();\\n\\n  int get totalQty => _items.values.fold(0, (s, i) => s + i.qty);\\n\\n  double get subTotal => _items.values.fold(0.0, (s, i) => s + i.total);\\n\\n  void add(Product p) {\\n    if (_items.containsKey(p.id)) {\\n      _items[p.id]!.qty++;\\n    } else {\\n      _items[p.id] = CartItem(product: p, qty: 1);\\n    }\\n    _save();\\n    notifyListeners();\\n  }\\n\\n  void remove(String productId) {\\n    _items.remove(productId);\\n    _save();\\n    notifyListeners();\\n  }\\n\\n  void changeQty(String productId, int qty) {\\n    if (_items.containsKey(productId)) {\\n      if (qty <= 0) {\\n        _items.remove(productId);\\n      } else {\\n        _items[productId]!.qty = qty;\\n      }\\n      _save();\\n      notifyListeners();\\n    }\\n  }\\n\\n  void clear() {\\n    _items.clear();\\n    _save();\\n    notifyListeners();\\n  }\\n\\n  void _save() {\\n    final list = _items.values.map((e) => e.toMap()).toList();\\n    prefs.setString('cart', jsonEncode(list));\\n  }\\n\\n  // Simple checkout that saves the transaction history\\n  Future<void> checkout({required double cashReceived}) async {\\n    final now = DateTime.now();\\n    final intl = DateFormat('yyyy-MM-dd HH:mm:ss');\\n    final receipt = {\\n      'datetime': intl.format(now),\\n      'items': _items.values.map((e) => e.toMap()).toList(),\\n      'subtotal': subTotal,\\n      'cash': cashReceived,\\n      'change': (cashReceived - subTotal)\\n    };\\n\\n    // load history\\n    final raw = prefs.getString('transactions');\\n    final list = raw == null ? <dynamic>[] : jsonDecode(raw) as List<dynamic>;\\n    list.add(receipt);\\n    await prefs.setString('transactions', jsonEncode(list));\\n\\n    // clear cart\\n    clear();\\n  }\\n\\n  List<Map<String, dynamic>> getTransactions() {\\n    final raw = prefs.getString('transactions');\\n    if (raw == null) return [];\\n    final decoded = jsonDecode(raw) as List<dynamic>;\\n    return decoded.map((e) => Map<String, dynamic>.from(e)).toList();\\n  }\\n}\\n\\n// ----------------- Sample Data -----------------\\nfinal sampleProducts = <Product>[\\n  Product(id: 'p1', name: 'Kopi Tubruk', price: 15000),\\n  Product(id: 'p2', name: 'Roti Bakar', price: 12000),\\n  Product(id: 'p3', name: 'Nasi Goreng', price: 25000),\\n  Product(id: 'p4', name: 'Teh Manis', price: 8000),\\n  Product(id: 'p5', name: 'Es Jeruk', price: 9000),\\n  Product(id: 'p6', name: 'Sate Ayam', price: 30000),\\n];\\n\\n// ----------------- UI -----------------\\nclass HomeScreen extends StatefulWidget {\\n  @override\\n  _HomeScreenState createState() => _HomeScreenState();\\n}\\n\\nclass _HomeScreenState extends State<HomeScreen> {\\n  String query = '';\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    final cart = Provider.of<CartProvider>(context);\\n    final filtered = sampleProducts\\n        .where((p) => p.name.toLowerCase().contains(query.toLowerCase()))\\n        .toList();\\n\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: Text('Simple POS'),\\n        actions: [\\n          IconButton(\\n              onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => TransactionsScreen())),\\n              icon: Icon(Icons.receipt_long)),\\n        ],\\n      ),\\n      body: Column(\\n        children: [\\n          Padding(\\n            padding: const EdgeInsets.all(8.0),\\n            child: TextField(\\n              decoration: InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'Cari produk...'),\\n              onChanged: (v) => setState(() => query = v),\\n            ),\\n          ),\\n          Expanded(\\n            child: GridView.builder(\\n              padding: EdgeInsets.all(8),\\n              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\\n                crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\\n                childAspectRatio: 3 / 2,\\n                crossAxisSpacing: 8,\\n                mainAxisSpacing: 8,\\n              ),\\n              itemCount: filtered.length,\\n              itemBuilder: (context, idx) {\\n                final p = filtered[idx];\\n                return Card(\\n                  elevation: 2,\\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\\n                  child: InkWell(\\n                    onTap: () => cart.add(p),\\n                    child: Padding(\\n                      padding: const EdgeInsets.all(8.0),\\n                      child: Column(\\n                        crossAxisAlignment: CrossAxisAlignment.start,\\n                        children: [\\n                          Expanded(child: Center(child: Icon(Icons.fastfood, size: 48, color: Colors.grey[700]))),\\n                          Text(p.name, style: TextStyle(fontWeight: FontWeight.bold)),\\n                          SizedBox(height: 4),\\n                          Text('Rp ${NumberFormat('#,###', 'id').format(p.price)}')\\n                        ],\\n                      ),\\n                    ),\\n                  ),\\n                );\\n              },\\n            ),\\n          ),\\n        ],\\n      ),\\n      floatingActionButton: FloatingActionButton.extended(\\n        onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => CartScreen())),\\n        icon: Stack(\\n          children: [\\n            Icon(Icons.shopping_cart),\\n            if (cart.totalQty > 0)\\n              Positioned(\\n                right: -6,\\n                top: -6,\\n                child: CircleAvatar(radius: 8, backgroundColor: Colors.red, child: Text('${cart.totalQty}', style: TextStyle(fontSize: 10))),\\n              )\\n          ],\\n        ),\\n        label: Text('Cart'),\\n      ),\\n    );\\n  }\\n}\\n\\nclass CartScreen extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    final cart = Provider.of<CartProvider>(context);\\n\\n    return Scaffold(\\n      appBar: AppBar(title: Text('Keranjang')),\\n      body: cart.items.isEmpty\\n          ? Center(child: Text('Keranjang kosong'))\\n          : Column(\\n              children: [\\n                Expanded(\\n                  child: ListView.builder(\\n                    itemCount: cart.items.length,\\n                    itemBuilder: (context, idx) {\\n                      final item = cart.items[idx];\\n                      return ListTile(\\n                        leading: Icon(Icons.fastfood),\\n                        title: Text(item.product.name),\\n                        subtitle: Text('Rp ${NumberFormat('#,###', 'id').format(item.product.price)}'),\\n                        trailing: Row(\\n                          mainAxisSize: MainAxisSize.min,\\n                          children: [\\n                            IconButton(onPressed: () => cart.changeQty(item.product.id, item.qty - 1), icon: Icon(Icons.remove)),\\n                            Text('${item.qty}'),\\n                            IconButton(onPressed: () => cart.changeQty(item.product.id, item.qty + 1), icon: Icon(Icons.add)),\\n                          ],\\n                        ),\\n                      );\\n                    },\\n                  ),\\n                ),\\n                Padding(\\n                  padding: const EdgeInsets.all(12.0),\\n                  child: Column(\\n                    children: [\\n                      Row(\\n                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\\n                        children: [Text('Subtotal', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)), Text('Rp ${NumberFormat('#,###', 'id').format(cart.subTotal)}', style: TextStyle(fontSize: 18))],\\n                      ),\\n                      SizedBox(height: 12),\\n                      Row(\\n                        children: [\\n                          Expanded(\\n                            child: ElevatedButton(\\n                              onPressed: () => _openCheckoutDialog(context, cart),\\n                              child: Text('Checkout'),\\n                            ),\\n                          ),\\n                          SizedBox(width: 8),\\n                          ElevatedButton(\\n                              onPressed: () {\\n                                cart.clear();\\n                                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Keranjang dibersihkan')));\\n                              },\\n                              style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),\\n                              child: Icon(Icons.delete))\\n                        ],\\n                      )\\n                    ],\\n                  ),\\n                )\\n              ],\\n            ),\\n    );\\n  }\\n\\n  void _openCheckoutDialog(BuildContext context, CartProvider cart) {\\n    final cashController = TextEditingController(text: cart.subTotal.toStringAsFixed(0));\\n    showDialog(\\n      context: context,\\n      builder: (context) => AlertDialog(\\n        title: Text('Pembayaran'),\\n        content: Column(\\n          mainAxisSize: MainAxisSize.min,\\n          children: [\\n            Text('Total: Rp ${NumberFormat('#,###', 'id').format(cart.subTotal)}'),\\n            SizedBox(height: 8),\\n            TextField(\\n              keyboardType: TextInputType.number,\\n              controller: cashController,\\n              decoration: InputDecoration(labelText: 'Tunai diterima (Rp)'),\\n            )\\n          ],\\n        ),\\n        actions: [\\n          TextButton(onPressed: () => Navigator.pop(context), child: Text('Batal')),\\n          ElevatedButton(\\n              onPressed: () async {\\n                final cash = double.tryParse(cashController.text.replaceAll(',', '')) ?? 0.0;\\n                if (cash < cart.subTotal) {\\n                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Tunai kurang')));\\n                  return;\\n                }\\n                await cart.checkout(cashReceived: cash);\\n                Navigator.pop(context);\\n                showDialog(\\n                    context: context,\\n                    builder: (_) => AlertDialog(\\n                          title: Text('Transaksi Berhasil'),\\n                          content: Text('Kembali: Rp ${NumberFormat('#,###', 'id').format((cash - cart.subTotal))}'),\\n                          actions: [TextButton(onPressed: () => Navigator.pop(context), child: Text('OK'))],\\n                        ));\\n              },\\n              child: Text('Bayar'))\\n        ],\\n      ),\\n    );\\n  }\\n}\\n\\nclass TransactionsScreen extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    final cart = Provider.of<CartProvider>(context);\\n    final tx = cart.getTransactions().reversed.toList();\\n\\n    return Scaffold(\\n      appBar: AppBar(title: Text('Riwayat Transaksi')),\\n      body: tx.isEmpty\\n          ? Center(child: Text('Belum ada transaksi'))\\n          : ListView.builder(\\n              itemCount: tx.length,\\n              itemBuilder: (context, idx) {\\n                final t = tx[idx];\\n                final items = (t['items'] as List<dynamic>).cast<Map<String, dynamic>>();\\n                return Card(\\n                  margin: EdgeInsets.all(8),\\n                  child: ListTile(\\n                    title: Text('Tanggal: ${t['datetime']}'),\\n                    subtitle: Column(\\n                      crossAxisAlignment: CrossAxisAlignment.start,\\n                      children: [\\n                        SizedBox(height: 6),\\n                        ...items.map((it) => Text('${it['name']} x${it['qty']}  Rp ${NumberFormat('#,###', 'id').format((it['price'] as num).toDouble())}')),\\n                        SizedBox(height: 6),\\n                        Text('Total: Rp ${NumberFormat('#,###', 'id').format((t['subtotal'] as num).toDouble())}'),\\n                      ],\\n                    ),\\n                  ),\\n                );\\n              },\\n            ),\\n    );\\n  }\\n}\\n\"}\n```\nSaya sudah membuat file aplikasi POS (Flutter) di canvas: **Flutter Pos Main**. File itu berisi sebuah contoh `lib/main.dart` lengkap — UI untuk daftar produk, keranjang (cart), checkout, dan riwayat transaksi (disimpan sederhana menggunakan `shared_preferences`).\n\nLangkah selanjutnya untuk menjalankan project di mesin Anda:\n\n1. Buat project Flutter baru:\n   ```bash\n   flutter create my_pos_app\n   cd my_pos_app\n   ```\n\n2. Ganti isi `lib/main.dart` dengan file yang saya letakkan di canvas (nama dokumen: **Flutter Pos Main**).\n\n3. Tambahkan dependensi di `pubspec.yaml` (under `dependencies:`):\n   ```yaml\n   provider: ^6.0.5\n   shared_preferences: ^2.1.1\n   intl: ^0.18.0\n   ```\n\n4. Install dependency dan jalankan:\n   ```bash\n   flutter pub get\n   flutter run\n   ```\n\nApa yang sudah ada di contoh:\n- Tampilan daftar produk (sample) dengan pencarian.\n- Menambahkan produk ke keranjang, ubah jumlah, hapus, dan bersihkan.\n- Checkout sederhana (masukkan tunai, simpan transaksi, tampilkan kembalian).\n- Riwayat transaksi yang disimpan di `SharedPreferences`.\n\nIngin saya:\n- Tambahkan penyimpanan lebih lengkap (SQLite / sqflite) untuk produk & transaksi?\n- Tambah fitur POS nyata: kategori, diskon, pajak, printer thermal / export PDF, login kasir, atau integrasi inventory?\n- Atau saya lanjut buat struktur project lengkap (beberapa file, folder: models/providers/screens) dan CI/CD?\n\nKatakan fitur mana yang Anda inginkan selanjutnya — saya akan lanjuti langsung."
    ]
  }
]